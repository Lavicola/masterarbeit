/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fau.dataMart.Controller;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDateTime;
import fau.dataMart.dto.QueryDTO;
import fau.dataMart.dto.QueryDTOPage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-05T22:08:28.313274270+01:00[Europe/Berlin]")
@Validated
@Tag(name = "query", description = "the query API")
public interface QueryApi {

    default QueryApiDelegate getDelegate() {
        return new QueryApiDelegate() {};
    }

    /**
     * GET /query : Get queries
     *
     * @param startDate The start Date of the Queries to search for (optional, default to 2020-11-01T00:04:12.462465539)
     * @param endDate The end Date of the Queries to search for (optional, default to #{T(java.time.LocalDateTime).now()})
     * @param page The page number (zero-based index) for paginated results. (optional, default to 0)
     * @param size The number of items per page. (optional, default to 40)
     * @param sort Sorting criteria for the results. (optional, default to desc)
     * @param tablenames List of Tablenames a Query shall own (optional)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "queryGet",
        summary = "Get queries",
        tags = { "query" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueryDTOPage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/query",
        produces = { "application/json" }
    )
    default ResponseEntity<QueryDTOPage> queryGet(
        @Parameter(name = "startDate", description = "The start Date of the Queries to search for", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false, defaultValue = "2020-11-01T00:04:12.462465539") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,
        @Parameter(name = "endDate", description = "The end Date of the Queries to search for", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false, defaultValue = "#{T(java.time.LocalDateTime).now()}") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate,
        @Parameter(name = "page", description = "The page number (zero-based index) for paginated results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "The number of items per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "40") Integer size,
        @Parameter(name = "sort", description = "Sorting criteria for the results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false, defaultValue = "desc") String sort,
        @Parameter(name = "tablenames", description = "List of Tablenames a Query shall own", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tablenames", required = false) List<String> tablenames
    ) {
        return getDelegate().queryGet(startDate, endDate, page, size, sort, tablenames);
    }


    /**
     * POST /query : redirect a new resource to  AMQP
     *
     * @param queryDTO  (required)
     * @return Successful Creation (status code 200)
     */
    @Operation(
        operationId = "queryPost",
        summary = "redirect a new resource to  AMQP",
        tags = { "query" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Creation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueryDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/query",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<QueryDTO> queryPost(
        @Parameter(name = "QueryDTO", description = "", required = true) @Valid @RequestBody QueryDTO queryDTO
    ) {
        return getDelegate().queryPost(queryDTO);
    }

}
