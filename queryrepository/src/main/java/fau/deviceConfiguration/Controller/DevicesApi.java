/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fau.deviceConfiguration.Controller;

import fau.deviceConfiguration.dto.DeviceDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-05T02:01:40.864532344+01:00[Europe/Berlin]")
@Validated
@Tag(name = "device", description = "the device API")
public interface DevicesApi {

    default DevicesApiDelegate getDelegate() {
        return new DevicesApiDelegate() {};
    }

    /**
     * GET /devices : Get all Devices
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "devicesGet",
        summary = "Get all Devices",
        tags = { "device" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DeviceDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/devices",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DeviceDTO>> devicesGet(
        
    ) {
        return getDelegate().devicesGet();
    }


    /**
     * GET /devices/{name} : Get one Device with the name
     *
     * @param name name of the Device (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "devicesNameGet",
        summary = "Get one Device with the name",
        tags = { "device" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/devices/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<DeviceDTO> devicesNameGet(
        @Parameter(name = "name", description = "name of the Device", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().devicesNameGet(name);
    }


    /**
     * POST /devices : Create a new Device
     *
     * @param deviceDTO  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "devicesPost",
        summary = "Create a new Device",
        tags = { "device" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/devices",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DeviceDTO> devicesPost(
        @Parameter(name = "DeviceDTO", description = "", required = true) @Valid @RequestBody DeviceDTO deviceDTO
    ) {
        return getDelegate().devicesPost(deviceDTO);
    }


    /**
     * PUT /devices : Update Device
     *
     * @param deviceDTO  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "devicesPut",
        summary = "Update Device",
        tags = { "device" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/devices",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DeviceDTO> devicesPut(
        @Parameter(name = "DeviceDTO", description = "", required = true) @Valid @RequestBody DeviceDTO deviceDTO
    ) {
        return getDelegate().devicesPut(deviceDTO);
    }

}
