plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id("org.openapi.generator") version "7.0.1"


}

group = 'fau.de'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.projectlombok:lombok:1.18.28'
	implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.5.2'
	implementation 'javax.persistence:javax.persistence-api:2.2'

	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.1.1'

	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webflux-ui', version: '2.2.0'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
	implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
	implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.6'

	implementation group: 'org.springframework.amqp', name: 'spring-rabbit', version: '3.1.0'





}

tasks.named('test') {
	useJUnitPlatform()
}



task generateOpenAPIDeviceFeature(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName.set("spring")

	def openapi_spec = project.rootProject.getProjectDir().getAbsolutePath() + File.separator.toString() + "src/main/java/fau/device_feature/openAPI/devicefeatureOpenAPI.yaml"

	configOptions.set([
			delegatePattern           : "true",
			globalProperty            : "apis",
			generateApiDocumentation  : "false",
			generateModelTests        : "false",
			generateModelDocumentation: "false",
			generateApiTests          : "false",
			models                    : "false",
			generateModels            : "false",
			modelPackage              : "fau.device_feature.dto",
	])
	typeMappings = ['string+date-time': 'LocalDateTime']
	importMappings = ['LocalDateTime'  : 'java.time.LocalDateTime',
					  'ParameterObject': 'org.springdoc.core.annotations.ParameterObject',
					  'Costmodel' : 'fau.device_feature.models.Costmodel',
					  'RPUCapabilities' : 'fau.device_feature.models.RPUCapabilities',
	]
	inputSpec.set(openapi_spec)
	outputDir.set(project.rootProject.getProjectDir().getAbsolutePath())
	apiPackage.set("fau.device_feature.Controller")
	invokerPackage.set("")

}


task generateOpenAPIDatastreamFeature(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName.set("spring")

	def openapi_spec = project.rootProject.getProjectDir().getAbsolutePath() + File.separator.toString() + "src/main/java/fau/datastream_feature/openAPI/datastreamOpenAPI.yaml"

	configOptions.set([
			delegatePattern           : "true",
			globalProperty            : "apis",
			generateApiDocumentation  : "false",
			generateModelTests        : "false",
			generateModelDocumentation: "false",
			generateApiTests          : "false",
			models                    : "false",
			generateModels            : "false",
			modelPackage              : "fau.datastream_feature.dto",
	])
	typeMappings = ['string+date-time': 'LocalDateTime']
	importMappings = ['LocalDateTime'  : 'java.time.LocalDateTime',
					  'ParameterObject': 'org.springdoc.core.annotations.ParameterObject',
					  'Datastream'     : 'fau.datastream_feature.models.Datastream',
					  'Metric'           : 'fau.datastream_feature.models.Metric'                      ]
	inputSpec.set(openapi_spec)
	outputDir.set(project.rootProject.getProjectDir().getAbsolutePath())
	apiPackage.set("fau.datastream_feature.Controller")
	invokerPackage.set("")

}

task generateOpenAPIQueryFeature(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName.set("spring")

	def openapi_spec = project.rootProject.getProjectDir().getAbsolutePath() + File.separator.toString() + "src/main/java/fau/query__feature/openAPI/query__feature.yaml"

	configOptions.set([
			delegatePattern           : "true",
		    skipValidateSpec		  : "true",
			globalProperty            : "apis",
			generateApiDocumentation  : "false",
			generateModelTests        : "false",
			generateModelDocumentation: "false",
			generateApiTests          : "false",
			models                    : "false",
			generateModels            : "false",
			modelPackage              : "fau.query__feature.dto",

	])
	typeMappings = ['string+date-time': 'LocalDateTime']
	importMappings = ['LocalDateTime'  : 'java.time.LocalDateTime',
					  'ParameterObject': 'org.springdoc.core.annotations.ParameterObject',
					  'Executionplan'  : 'fau.query__feature.models.Executionplan'
	]

	inputSpec.set(openapi_spec)
	outputDir.set(project.rootProject.getProjectDir().getAbsolutePath())
	apiPackage.set("fau.query__feature.Controller")
	invokerPackage.set("")

}

